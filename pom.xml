<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.orchid</groupId>
    <artifactId>orchid-build</artifactId>
    <version>1.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>orchid</name>
    <description>orchid</description>

    <scm>
        <url>https://github.com/biejunyang/orchid</url>
        <connection>scm:git:git://github.com/biejunyang/orchid.git</connection>
        <developerConnection>scm:git:ssh://github.com/biejunyang/orchid.git</developerConnection>
    </scm>

    <properties>
        <orchild.version>${project.version}</orchild.version>
        <java.version>1.8</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!--docker properties -->
        <!--<docker.image.prefix>registry.cn-hangzhou.aliyuncs.com/biejunyang</docker.image.prefix>-->
         <docker.image.prefix>biejunyang</docker.image.prefix>

    </properties>


    <modules>
        <module>orchid-dependencies</module>
        <module>orchild-common</module>
        <module>orchid-cloud-app</module>
        <module>orchild-service-app</module>
        <module>orchid-examples</module>
    </modules>


    <dependencyManagement>
        <!--三方库依赖-->
        <dependencies>
            <dependency>
                <groupId>com.orchid</groupId>
                <artifactId>orchid-dependencies</artifactId>
                <version>${orchild.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <!--项目输出名-->
        <finalName>${project.artifactId}-${project.version}</finalName>

        <!-- 项目默认添加的插件依赖-->
        <plugins>


        </plugins>


        <!-- 项目构建插件管理-->
        <pluginManagement>
            <plugins>
                <!--maven compiler插件-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <compilerArgument>-parameters</compilerArgument>
                        <parameters>true</parameters>
                    </configuration>
                </plugin>

                <!--Spring Boot应用构建插件-->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>repackage</id>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- docker maven插件-->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>1.2.0</version>
                    <configuration>
                        <!--构建的镜像名-->
                        <imageName>${project.artifactId}</imageName>
                        <imageTags>
                            <imageTag>latest</imageTag>
                            <imageTag>${project.version}</imageTag>
                        </imageTags>


                        <!--强制覆盖镜像的某个标记-->
                        <forceTags>true</forceTags>

                        <!-- 指定Dockerfile 路径-->
                        <dockerDirectory>${basedir}/docker</dockerDirectory>

                        <!--Docker构建时的目录,默认是${project.build.directory}，构建上下文目录则是该目录下的docker目录-->
                        <buildDirectory>${project.build.directory}</buildDirectory>
                        <!--构建参数设置-->
                        <buildArgs>
                            <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                        </buildArgs>

                        <!--基础镜像-->
                        <!--<baseImage>fabletang/jre8-alpine</baseImage>-->

                        <!--声明要暴露的端口 -->
                        <!--<exposes>8080</exposes>-->

                        <!--容器启动执行命令-->
                        <!--<entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>-->

                        <!--文件复制指令，复制文件到容器指定目录-->
                        <resources>
                            <resource>
                                <!--容器目标路径-->
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>

                        <!--dockerhub认证信息 -->
                        <serverId>docker-hub</serverId>
                    </configuration>

                    <!-- 绑定到maven生命周期阶段-->
                    <executions>
                        <!--删除历史镜像-->
                        <execution>
                            <id>remove-image</id>
                            <phase>clean</phase>
                            <goals>
                                <goal>removeImage</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>remove-tag-image</id>
                            <phase>clean</phase>
                            <goals>
                                <goal>removeImage</goal>
                            </goals>
                            <configuration>
                                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                                <imageTags>
                                    <imageTag>${project.version}</imageTag>
                                </imageTags>
                            </configuration>
                        </execution>

                        <!--生成镜像-->
                        <execution>
                            <id>build-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                        <!--标记镜像-->
                        <execution>
                            <id>tag-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <image>${project.artifactId}:${project.version}</image>
                                <newName>${docker.image.prefix}/${project.artifactId}:${project.version}</newName>
                            </configuration>
                        </execution>
                        <!--推送镜像-->
                        <!--<execution>-->
                            <!--<id>push-image</id>-->
                            <!--<phase>install</phase>-->
                            <!--<goals>-->
                                <!--<goal>push</goal>-->
                            <!--</goals>-->
                            <!--<configuration>-->
                                <!--<imageName>${docker.image.prefix}/${project.artifactId}:${project.version}</imageName>-->
                            <!--</configuration>-->
                        <!--</execution>-->
                    </executions>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>


    <developers>
        <developer>
            <name>biejunyang</name>
            <email>biejunyang1210@163.com</email>
        </developer>
    </developers>

</project>
